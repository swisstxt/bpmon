// Code generated by "esc -o static.go -pkg dashboard -prefix static static"; DO NOT EDIT.

package dashboard

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    3229,
		modtime: 1513160622,
		compressed: `
H4sIAAAAAAAC/5xXXW/bNhe+z6/gyxdKE2CWsnXAtljikMwruostQZtdDMMQUBJtnZoiOfI4mTHsvw+k
aFuyrcTdTSudj+d8PedYyf83u/vh4bf7H0mDrWRnuf+PSK4WBRWKeoHgNTsjhJC8FchJ1XDrBBb014d3
k29pVCGgFOz2/ue7X8iMu6bU3NZ51ok7EwlqSRor5gVtEI27zrK5VujShdYLKbgBl1a6zSrnvp/zFuS6
+KBLjfr666urL765uqLECllQh2spXCME0j7yvo7g2oiCovgLPSSNoblzAl1W6bbVKvWK/wASLKJznnUd
yktdr9lZXsMTqSR3rqCVVshBCbuJ0dN5J684lE1A7VyOu02cqBC0IlLMsWe5by31Qu+pgwm0i2hCgs0E
2gUlzlbb/pTGt8eoBSVcYkGhArXgra6Wx/Cc4Yqdq9KZ6ezm4/vbu5sPszwL0mFuWQ1PvcL2XsfrtLBo
jheqFQqFogbkpfSjsitBNyigzApJ+HcSG06gLugcJPrnmiOfGMkr0WhZC1vQd0FD5tqS25UDJZwj91ZX
wrk0TSkbr6B7jILduH04H2ZknlLzGnyXvd3mZUAKZyIfBgF6wTchc1dZMNinrF/mDtpvLT7OLW/FI7ZG
HmFkUJI8KRxyFAmjJNC8oM9QY3PtNTU4I/n6XthKKExYMo09RK0lgine5EkRnxP2Jva3sy5onhRm4xn9
HHLbacJTwrYdzrOunNcKA4XC2pXxNHFjpblVGS4RZT/1zfu9DPTpzQh3d28nsyzHhj1AK/IMm/AyW1nu
wbaCG6U09kQZ2j5f9nBz7M7GIE4S+HfxxC0BAooMarwkf5PkMLHDpcSa5Ukx8P0d/kgRWuGQtybxudWn
O9ax0oS5z3Pk244cCzlsUKz/n36JedZrUp7FSZ1KkKWBA1p4eZ4USwNQe84dXc2lAeU3YkeezsULE0bO
25q7Ztodvw1iaTzg4w77kT9xkLwECbimLE3TeBcTEjVSvHAGh96jdz5sNx1PotOfeos/cwNLM7Z2QopW
KCSGKyH30htpemleKNOvTriPh9QbQISxhZnFH8gQ9YS5nTSsINnr3tE8AKtm88vVRduco0Y/T2qBHKQj
5QpRK0q0qiRUy04765QX5/9/+910m59/u5xS9rHRzySajOdzTHQatU6iV+TU64FfoHfswT70Rjye/NLA
gVeQsVeqHhynfYSh8jWobnBuOOHtFBuoxfgUp5d0CEPZe6jFy0M9aUX7H3Gf/lwJu568Tb9Kv0xbUOmn
UNXG55gLitZIjqAWJxjHj+gXDFs+FpWBAry4nPZLyOIndNb9LXL2bwAAAP//Cna+OZ0MAAA=
`,
	},

	"/main.js": {
		local:   "static/main.js",
		size:    6756,
		modtime: 1513160622,
		compressed: `
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
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    1085,
		modtime: 1513251718,
		compressed: `
H4sIAAAAAAAC/4ST4W6jMAzHv/cpIp1OupNGVdoyttzTOIkhEamNwG3XO927Txm0HRNl35D//tn+m3gt
QSI+qXV/NB+f6t9KKaUqJsnOGGovWhmO7s9H+ABdHSgTbrXKN+3bJGpYhA9X4f9qtfYILlA91jwHJz7J
m58D50LfRrhoFSgGwsxEts0gteASOVPTtASHyZh9+Ita5btUNmVYD5086ulHT/vb9DYidMmk+CFgwDZ1
x0dymeXInVY/EHGo7VAgxH6sfjNATDi7i+f73EcRpiv5eZHbW07Thl6t4QQhggkxyEVN3FyHv29jUNdV
d9/JPenquYoMolXESiYUNyMy47h01pbPX9K15xN2j6FiD697O4FoqQlWL2VZfM3/rovbFPsdTqgjNcRn
Wui0M0W1nWO+6wau3NiBFDC3A5k8rKT5JyVuFMfXq9XL+J/EL9+V4JtkEENNn36TpPN5PFgOxr4OyxbD
7qKk0yQ+sz5E94ud+71gqnK5hcTOoHhCWmDdFgvME/seAAD//+RJZ7Y9BAAA
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
