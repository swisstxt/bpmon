// Code generated by go generate; DO NOT EDIT.

package config

func configDoc(section string) map[string]string {
	doc := make(map[string]string)
	doc[section] = `The default section is - as the name suggests - read by default. Note that you can
define as many sections as your want. You can for examlpe define a 'test' section
that refers to a test connection string for icinga and/or influx. To reduce
boilerplate consider anchors (http://yaml.org/spec/1.2/spec.html#id2765878)
 
    default: &anchor_to_default
      ...
    test:
      << *anchor_to_default
 
Sections other than 'default' can be used via the -s/--section flag.`
	doc[section+".availabilities"] = `Define your office hours et al. according to your service level
agreements (SLA). You will reference themlater in your BP definitions.
`
	doc[section+".checker"] = `First BPMON needs to have access to your Icinga2 API. Learn more on by reading
https://docs.icinga.com/icinga2/latest/doc/module/icinga2/chapter/icinga2-api.
`
	doc[section+".checker.connection"] = `The connection string describes how to connect to your Icinga API. The
string needs to follow the pattern:
  [protocol]://[user]:[passwd]@[hostname]:[port]
`
	doc[section+".checker.kind"] = `kind defines the checker implementation to be used by BPMON. Currently
only icinga is implemented.
`
	doc[section+".checker.timeout"] = `timeout defines how long BPMON waits for each request to the checker to
recieve a response. The string is parsed as a goland duration, refer to
its documentation for more details:
  https://golang.org/pkg/time/#ParseDuration
`
	doc[section+".checker.tls_skip_verify"] = `BPMON verifies if a https connection is trusted. If you wont to trust a
connection with an invalid certificate you have to set this to true.
`
	doc[section+".dashboard"] = `dashboard configures the dashboard subcommand.
`
	doc[section+".dashboard.grant_write"] = `grant_write is a list of recipients which are allowed to access the annotate
endpoint via POST request.
`
	doc[section+".dashboard.listener"] = `listener tells the dashboard where to bind. This string
should match the pattern [ip]:[port].
`
	doc[section+".dashboard.static"] = `static is the path to the directory that sould be served
at the root of the server. This should contain the UI of the
Dashboard
`
	doc[section+".env"] = `env allows you to setup your configuration file structure according to your
requirements.
`
	doc[section+".env.bp"] = `bp is the directory where your buisness process definitions are stored. The path must be
relative to your base directory (-b/--base). The path must exist.
`
	doc[section+".env.runner"] = `runners is the directory where your custom runners are stored. The path must be
relative to your base directory (-b/--base). The path must exist.
`
	doc[section+".global_recipients"] = `global_recipients will be added to the repicients list of all BP
`
	doc[section+".rules"] = `Extend the default rules. The default rules are provided by the checker implementation
and can be reviewed via bpmon config print.
`
	doc[section+".store"] = `The connection to the InfluxDB is required in order to persist the the state, eg.
the write subcommand.
`
	doc[section+".store.connection"] = `The connection string describes how to connect to your Influx Database.
The string needs to follow the pattern:
  [protocol]://[user]:[passwd]@[hostname]:[port]
`
	doc[section+".store.debug"] = `if debug is set to true all queries generated and executed by bpmon will
be logged to stdout.
`
	doc[section+".store.get_last_status"] = `This will tell BPMON to compare the current status against the last
status saved in InfluxDB and adds some values to the measurement
accordingly. This then allows to generate reports such as 'Tell me
only when a status is changed from good to bad'. This only runs against
types listed in 'save_ok' since only these are persisted 'correctly'.
`
	doc[section+".store.kind"] = `kind defines the store implementation to be used by BPMON. Currently
only influx is implemented.
`
	doc[section+".store.save_ok"] = `save_ok tells BPMON which data points should be persisted if the state is 'ok'.
By default 'OK' states aro only saved to InfluxDB if its an BP measurement.
That means that 'OK' states for KPIs and SVCs will not be saved for the sake of
of storage required. 'OK' states of BPs are saved as 'heart beat' of BPMON.
`
	doc[section+".store.timeout"] = `timeout is read as a go (golang) duration, please refer to
https://golang.org/pkg/time/#Duration for a detailed explanation.
`
	doc[section+".store.tls_skip_verify"] = `BPMON verifies if a https connection is trusted. If you wont to trust a
connection with an invalid certificate you have to set this to true
`
	return doc
}
