// Code generated by go generate; DO NOT EDIT.

package config

func configDoc(section string) map[string]string {
	doc := make(map[string]string)
	doc[section] = `The default section is - as the name suggests - read by default. Note the '&default'
notation; this is known an an 'anchor' and allows you to reuse the settings
in other sections...`
	doc[section+".availabilities"] = `Define your office hours et al. according to your service level
agreements (SLA). You can later reference them in your BP definitions.
`
	doc[section+".checker"] = `First BPMON needs to have access to your Icinga2 API. Learn more on by reading
https://docs.icinga.com/icinga2/latest/doc/module/icinga2/chapter/icinga2-api.
`
	doc[section+".checker.connection"] = `The connection string describes how to connect to your Icinga API. The
string needs to follow the pattern:
  [protocol]://[user]:[passwd]@[hostname]:[port]
`
	doc[section+".checker.kind"] = `kind defines the checker implementation to be used by BPMON. Currently
only icinga is implemented.
`
	doc[section+".checker.timeout"] = `timeout defines how long BPMON waits for each request to the checker to
recieve a response. The string is parsed as a goland duration, refer to
its documentation for more details:
  https://golang.org/pkg/time/#ParseDuration
`
	doc[section+".checker.tls_skip_verify"] = `BPMON verifies if a https connection is trusted. If you wont to trust a
connection with an invalid certificate you have to set this to true.
`
	doc[section+".dashboard"] = `dashboard configures the dashboard subcommand.
`
	doc[section+".dashboard.grant_write"] = `grant_write is a list of recipients which are allowed to access the annotate
endpoint via POST request.
`
	doc[section+".dashboard.listener"] = `listener tells the dashboard where to bind. This string
should match the pattern [ip]:[port].
`
	doc[section+".dashboard.static"] = `static is the path to the directory that sould be served
at the root of the server. This should contain the UI of the
Dashboard
`
	doc[section+".global_recipients"] = `global_recipients will be added to the repicients list af all BP
`
	doc[section+".health"] = `health ... TODO
`
	doc[section+".health.checker_required"] = ``
	doc[section+".health.id"] = ``
	doc[section+".health.name"] = ``
	doc[section+".health.responsible"] = ``
	doc[section+".health.store_required"] = ``
	doc[section+".health.template"] = ``
	doc[section+".rules"] = `Extend the default rules; in that case: Do not run the alarming command
if a critical service is aready aknowledged to avoid alarm spamming.
`
	doc[section+".store"] = `Also the connection to the InfluxDB is required in order to persist the
state for reporting and such
`
	doc[section+".store.connection"] = ``
	doc[section+".store.debug"] = ``
	doc[section+".store.get_last_status"] = ``
	doc[section+".store.kind"] = ``
	doc[section+".store.save_ok"] = ``
	doc[section+".store.timeout"] = ``
	doc[section+".store.tls_skip_verify"] = `BPMON verifies if a https connection is trusted. If you wont to trust a
connection with an invalid certificate you have to set this to true
`
	doc[section+".templates"] = `templates is a map of templates which can be used with the run
subcommand
`
	return doc
}
